#include "BasisSet.h"
#include <sstream>
#include <iomanip>
#include <cmath>
#include <cstdlib>

using namespace std;

// This writes the header for the MKL file
// Pretty self-explanatory
void WriteHeader ( ofstream & outFile )
{
  outFile << "$MKL" << endl;
  outFile << "#" << endl;
  outFile << "# MKL format from an NBO Plot File" << endl;
  outFile << "#" << endl;
}

/*
This procedure takes arguments to the function
to define the charge and multiplicity that
are written to the output file (the .mkl file)
*/

void WriteChargeMult ( ofstream & outFile, char* charge, char* mult )
{
  string scharge(charge);
  string smult(mult);
  outFile << "$CHAR_MULT" << endl;
  outFile << "  "+scharge+" "+smult << endl;
  outFile << "$END" << endl << endl;
}

/*
This reads the .31 file for the coordinates
It assumes that they are in Angstroems
It then write them into the output file (.mkl)
and saves the geometry to a vector
*/

void ReadWriteGeom ( char* base, ofstream & outFile,
                     vector<Atom> & geom )
{
  string ifile(base);
  ifile = ifile+".31";
  ifstream inFile(ifile.c_str());
  string line;
  outFile << "$COORD" << endl;
  // skip the first 5 lines, then read the first Atom
  for ( unsigned int i = 0; i < 6; i++ ) { getline(inFile,line); }
  while ( line.find("---") == string::npos )
  {
    unsigned int atnum;
    float x, y, z;
    stringstream ss;
    ss << line;
    ss >> atnum >> x >> y >> z;
    Atom tatom(atnum,x,y,z);
    geom.push_back(tatom);
    outFile << setw(4) << atnum;
    outFile << setw(12) << fixed << setprecision(6) << x;
    outFile << setw(11) << fixed << setprecision(6) << y;
    outFile << setw(11) << fixed << setprecision(6) << z << endl;
    getline(inFile,line);
  }
  outFile << "$END" << endl << endl;
  inFile.close();
}

/*
The following section includes ReadWriteBasis
And all the corresponding procedures used in the
function
*/

/*
This reads the basis set information from the .31
file and stores it in the BasisSet object
--- This assumes spherical basis sets (ORCA)
*/

void ReadBasis ( ifstream & inFile,
                 const vector<Atom> & geom,
                 BasisSet & basis )
{

}

/*
  The main function simply reads the .31 file
  into a BasisSet object and then calls a function
  to write it to the output file
*/

void ReadWriteBasis ( char* base, ofstream & outFile,
                      const vector<Atom> & geom,
                      BasisSet & basis )
{
  string ifile(base);
  ifile = ifile+".31";
  ifstream inFile(ifile.c_str());
  ReadBasis(inFile,geom,basis);
  WriteBasis(outFile,geom,basis);
  inFile.close();
}

/*
This is the main routine.
This program is used to take plot files
generated by GENNBO (or an NBO interface
in common ESS packages) and create an MKL
file that can be used by ORCA's
orca_2mkl routine to generate a corresponding
gbw file that can be used as a guess for
for a quantum calculation.

In particular, this program was written to
utilize NBOs and NLMOs as guess orbitals
for CASSCF calculations.

Building: This was successfully built with gcc 7.4.0
  - Please feel free to try other versions!

Calling:
nbo2mkl BASE EXT charge multiplicity
  - Here BASE is the base of the relevant files.
  - It is required that there be the following present:
    1. BASE.31
    2. BASE.EXT
    3. BASE.47
  - EXT is the extension of the relevant orbital file.
    - By default, GENNBO uses 37 for NBO and 39
      for NLMOs
  - the BASE.47 file is the archive file that was either
    used with GENNBO to generate the plot files or almost
    all ESS packages have an option to save the archive
    file
  - charge is the charge of the system
  - multiplicity is the multiplicity

Currently, the MKL file ONLY  contains the coordinates,
charge, multiplicity, basis set, and MO coefficients.

Further, it doesn't generate beta MO coefficients.

Also, it doesn't include symmetry labels or orbital
energies

The inclusion of the above along with occupancies is planned
for future development.
*/



int main ( int argc, char* argv[] )
{
  if ( argc != 5 )
  {
    cout << "Incorrect argument #!!!\nExiting..." << endl;
    exit(1);
  }
  BasisSet basis;
  vector<Atom> & geom;
  string ofile(argv[1]);
  ofile = ofile + ".mkl";
  ofstream outFile(ofile.c_str());
  WriteHeader(outFile);
  WriteChargeMult(outFile,argv[2],argv[3]);
  ReadWriteGeom(argv[1],outFile,geom);
  ReadWriteBasis(argv[1],outFile,geom,basis);
  ReadWriteOrbitals(argv[1],outFile,geom,basis);
}
